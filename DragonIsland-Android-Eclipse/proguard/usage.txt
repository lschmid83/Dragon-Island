com.citex.android.free.dragonisland.BuildConfig
com.citex.android.free.dragonisland.R
com.citex.android.free.dragonisland.R$attr
com.citex.android.free.dragonisland.R$drawable
com.citex.android.free.dragonisland.R$id
com.citex.android.free.dragonisland.R$layout
com.citex.android.free.dragonisland.R$string
com.citex.dragonisland.android.MainActivity:
    public com.citex.dragonisland.android.drawing.GLSurfaceViewRenderer mRenderer
    196:196:public com.citex.dragonisland.android.event.GLSurfaceViewEvent getSurface()
com.citex.dragonisland.android.drawing.GLSurfaceView:
    75:75:public android.view.SurfaceHolder getSurfaceHolder()
    83:84:public void setGLWrapper(com.citex.dragonisland.android.drawing.GLSurfaceView$GLWrapper)
    156:157:public void setEvent(java.lang.Runnable)
com.citex.dragonisland.android.drawing.GLSurfaceViewRenderer:
    185:185:public com.citex.dragonisland.android.drawing.GLSurfaceView getSurface()
com.citex.dragonisland.android.drawing.Grid:
    308:308:public boolean usingHardwareBuffers()
    419:419:public final int getVertexBuffer()
    423:423:public final int getTextureBuffer()
    427:427:public final int getIndexBuffer()
    431:431:public final int getColorBuffer()
    435:435:public final int getIndexCount()
    439:439:public boolean getFixedPoint()
com.citex.dragonisland.android.event.GLSurfaceViewEvent:
    128:128:public com.citex.dragonisland.android.drawing.GLSurfaceViewRenderer getRenderer()
com.citex.dragonisland.core.drawing.Color:
    private int mAlpha
    28:33:public Color(int,int,int,int)
    76:76:public int getAlpha()
com.citex.dragonisland.core.drawing.IBufferedImage:
    public abstract java.lang.Object clone()
com.citex.dragonisland.core.game.GameMode:
    1:1:public static com.citex.dragonisland.core.game.GameMode[] values()
    1:1:public static com.citex.dragonisland.core.game.GameMode valueOf(java.lang.String)
com.citex.dragonisland.core.game.ResourceType:
    1:1:public static com.citex.dragonisland.core.game.ResourceType[] values()
    1:1:public static com.citex.dragonisland.core.game.ResourceType valueOf(java.lang.String)
com.citex.dragonisland.core.game.SaveFile:
    242:242:public java.util.ArrayList getSaveGames()
    266:268:public static int getFileCount(java.lang.String)
    277:285:public static int getFolderCount(java.lang.String)
com.citex.dragonisland.core.game.Settings:
    13:13:public Settings()
com.citex.dragonisland.core.game.Transition:
    80:82:public void stop()
com.citex.dragonisland.core.level.Level:
    82:83:public void setHeader(com.citex.dragonisland.core.level.Header)
    104:106:public void setTileDescription(int,com.citex.dragonisland.core.tileset.TileDescription)
    254:254:public int getEntityCount()
    739:810:public void saveLegacyLevel(java.lang.String)
com.citex.dragonisland.core.level.Map:
    186:187:public void setCollisionTile(int,int,int)
    218:218:public int getStartX()
    226:226:public int getStartY()
    234:234:public com.citex.dragonisland.core.sprite.player.enums.PipeState getStartState()
com.citex.dragonisland.core.panel.Game:
    375:375:public com.citex.dragonisland.core.sprite.entity.IEntity getEntity(int)
com.citex.dragonisland.core.panel.LevelLoading:
    305:305:public int getTotal()
com.citex.dragonisland.core.panel.License:
    297:297:public int getTotal()
com.citex.dragonisland.core.panel.TitleScreen:
    1177:1241:public void controlInputLoadGame(float,float,int)
com.citex.dragonisland.core.sprite.Sprite:
    476:477:public boolean setAnimationStateIndex(int)
    493:493:public int getAnimationStateIndex()
    575:575:public com.citex.dragonisland.core.drawing.IBufferedImage getFrame(char)
    585:585:public com.citex.dragonisland.core.drawing.IBufferedImage getFrame(int,char)
    597:608:public com.citex.dragonisland.core.drawing.IBufferedImage getFrame(int,char,int)
    619:619:public com.citex.dragonisland.android.drawing.GLSprite getFrame(javax.microedition.khronos.opengles.GL10,char)
    629:629:public com.citex.dragonisland.android.drawing.GLSprite getFrame(javax.microedition.khronos.opengles.GL10,int,char)
    723:724:public boolean setState(int)
    732:732:public int getFrameCount()
    748:749:public void setFrameIndex(int)
    870:870:public boolean getRotate()
    883:884:public void setY(float)
com.citex.dragonisland.core.sprite.SpriteSheet:
    125:126:public void drawFrame(java.lang.Object,int,char,int,int)
    147:147:public void drawFrame(java.lang.Object,int,char,java.awt.geom.AffineTransform)
    157:157:public void drawFrame(java.lang.Object,int,char,int,int,int,int)
    192:192:public com.citex.dragonisland.android.drawing.GLSprite getFrame(javax.microedition.khronos.opengles.GL10,int,char)
com.citex.dragonisland.core.sprite.entity.IEntity:
    public abstract com.citex.dragonisland.core.drawing.Point getPosition()
    public abstract void turn()
    public abstract void setPosition(com.citex.dragonisland.core.drawing.Point)
    public abstract void spinOffScreen(char)
com.citex.dragonisland.core.sprite.entity.object.FlagPole:
    private com.citex.dragonisland.core.thread.Main mMain
com.citex.dragonisland.core.sprite.player.Player:
    869:869:public void detectEntityCollision(java.util.ArrayList)
    1384:1385:public void setLives(int)
com.citex.dragonisland.core.sprite.player.enums.FlagState:
    1:1:public static com.citex.dragonisland.core.sprite.player.enums.FlagState[] values()
    1:1:public static com.citex.dragonisland.core.sprite.player.enums.FlagState valueOf(java.lang.String)
com.citex.dragonisland.core.sprite.player.enums.LevelExit:
    1:1:public static com.citex.dragonisland.core.sprite.player.enums.LevelExit[] values()
    1:1:public static com.citex.dragonisland.core.sprite.player.enums.LevelExit valueOf(java.lang.String)
com.citex.dragonisland.core.sprite.player.enums.PipeState:
    1:1:public static com.citex.dragonisland.core.sprite.player.enums.PipeState valueOf(java.lang.String)
com.citex.dragonisland.core.sprite.player.enums.PlayerSize:
    1:1:public static com.citex.dragonisland.core.sprite.player.enums.PlayerSize valueOf(java.lang.String)
com.citex.dragonisland.core.thread.Main:
    private boolean mFinished
    477:477:public boolean isFinished()
    501:501:public java.lang.Object getSurface()
    650:650:public com.citex.dragonisland.core.game.Transition getTransition()
com.citex.dragonisland.core.util.Dialog:
    13:13:public Dialog()
com.citex.dragonisland.core.util.Drawing:
    16:16:public Drawing()
com.citex.dragonisland.core.util.FileIO:
    48:48:public FileIO()
com.citex.dragonisland.core.util.Numbers:
    14:14:public Numbers()
com.citex.dragonisland.core.util.Sound:
    17:17:public Sound()
com.citex.dragonisland.core.util.Sprite:
    30:30:public Sprite()
com.citex.dragonisland.java.GameFrame:
    public com.citex.dragonisland.java.GamePanel mPanel
    31:64:public GameFrame()
    72:78:public void centerScreen()
com.citex.dragonisland.java.GamePanel:
    86:86:public java.awt.Graphics getBufferedGraphics()
com.citex.dragonisland.java.Main
com.citex.dragonisland.java.Main$1
com.citex.dragonisland.java.audio.JLayerMp3Player:
    54:55:public void play()
    107:108:public void start()
    112:113:public void pause()
    218:218:public com.citex.dragonisland.java.audio.PlaybackListener getPlayBackListener()
    225:227:public void stop()
com.citex.dragonisland.java.audio.PlaybackEvent:
    44:44:public int getId()
    45:45:public void setId(int)
    47:47:public int getFrame()
    48:48:public void setFrame(int)
    50:50:public com.citex.dragonisland.java.audio.JLayerMp3Player getSource()
    51:51:public void setSource(com.citex.dragonisland.java.audio.JLayerMp3Player)
com.citex.dragonisland.java.drawing.Image:
    279:279:public void setVertices(javax.microedition.khronos.opengles.GL10,float[])
javazoom.jl.converter.Converter
javazoom.jl.converter.Converter$PrintWriterProgressListener
javazoom.jl.converter.Converter$ProgressListener
javazoom.jl.converter.RiffFile
javazoom.jl.converter.RiffFile$RiffChunkHeader
javazoom.jl.converter.WaveFile
javazoom.jl.converter.WaveFile$WaveFileSample
javazoom.jl.converter.WaveFile$WaveFormat_Chunk
javazoom.jl.converter.WaveFile$WaveFormat_ChunkData
javazoom.jl.converter.WaveFileObuffer
javazoom.jl.converter.jlc
javazoom.jl.converter.jlc$jlcArgs
javazoom.jl.decoder.BitReserve:
    private static final int BUFSIZE
    private static final int BUFSIZE_MASK
    private int buf_bit_idx
javazoom.jl.decoder.Bitstream:
    private static final int BUFFER_INT_SIZE
    public int header_pos()
    public java.io.InputStream getRawID3v2()
    public int readBits(int)
    public int readCheckedBits(int)
javazoom.jl.decoder.BitstreamErrors
javazoom.jl.decoder.Control
javazoom.jl.decoder.Decoder:
    public static javazoom.jl.decoder.Decoder$Params getDefaultParams()
    public void setEqualizer(javazoom.jl.decoder.Equalizer)
    public void setOutputBuffer(javazoom.jl.decoder.Obuffer)
    public int getOutputBlockSize()
    protected javazoom.jl.decoder.DecoderException newDecoderException(int)
javazoom.jl.decoder.Decoder$Params:
    public void setOutputChannels(javazoom.jl.decoder.OutputChannels)
    public javazoom.jl.decoder.OutputChannels getOutputChannels()
javazoom.jl.decoder.DecoderErrors
javazoom.jl.decoder.DecoderException:
    public int getErrorCode()
javazoom.jl.decoder.Equalizer:
    public static final float BAND_NOT_PRESENT
    private static final int BANDS
    public Equalizer(float[])
    public Equalizer(javazoom.jl.decoder.Equalizer$EQFunction)
    public void setFrom(javazoom.jl.decoder.Equalizer$EQFunction)
    public int getBandCount()
    public float setBand(int,float)
    public float getBand(int)
javazoom.jl.decoder.Equalizer$EQFunction
javazoom.jl.decoder.Header:
    public static final int MPEG2_LSF
    public static final int MPEG25_LSF
    public static final int MPEG1
    public static final int STEREO
    public static final int JOINT_STEREO
    public static final int DUAL_CHANNEL
    public static final int SINGLE_CHANNEL
    public static final int FOURTYFOUR_POINT_ONE
    public static final int FOURTYEIGHT
    public static final int THIRTYTWO
    public boolean copyright()
    public boolean original()
    public boolean vbr()
    public int vbr_scale()
    public byte[] vbr_toc()
    public boolean padding()
    public int max_number_of_frames(int)
    public int min_number_of_frames(int)
    public float total_ms(int)
    public int getSyncHeader()
    public int bitrate_instant()
javazoom.jl.decoder.InputStreamSource
javazoom.jl.decoder.JavaLayerError
javazoom.jl.decoder.JavaLayerErrors
javazoom.jl.decoder.JavaLayerException:
    public java.lang.Throwable getException()
javazoom.jl.decoder.JavaLayerUtils:
    public static java.lang.Object deserialize(java.io.InputStream,java.lang.Class)
    public static void serialize(java.io.OutputStream,java.lang.Object)
    public static synchronized void setHook(javazoom.jl.decoder.JavaLayerHook)
    public static synchronized javazoom.jl.decoder.JavaLayerHook getHook()
javazoom.jl.decoder.LayerIIIDecoder:
    private static final int SSLIMIT
    private static final int SBLIMIT
    public void seek_notify()
javazoom.jl.decoder.LayerIIIDecoder$Sftable:
    public LayerIIIDecoder$Sftable(javazoom.jl.decoder.LayerIIIDecoder)
javazoom.jl.decoder.Manager
javazoom.jl.decoder.Obuffer:
    public static final int OBUFFERSIZE
    public static final int MAXCHANNELS
    public abstract void close()
    public abstract void set_stop_flag()
javazoom.jl.decoder.OutputChannels:
    public static final int BOTH_CHANNELS
    public static final int LEFT_CHANNEL
    public static final int RIGHT_CHANNEL
    public static final int DOWNMIX_CHANNELS
    public static javazoom.jl.decoder.OutputChannels fromInt(int)
    public int getChannelsOutputCode()
    public int getChannelCount()
javazoom.jl.decoder.SampleBuffer:
    public int getChannelCount()
    public int getSampleFrequency()
    public void close()
    public void set_stop_flag()
javazoom.jl.decoder.Source
javazoom.jl.decoder.SynthesisFilter:
    private static final double MY_PI
    private void compute_new_v_old()
javazoom.jl.decoder.huffcodetab:
    private static final int MXOFF
    private static final int HTN
javazoom.jl.player.AudioDevice:
    public abstract boolean isOpen()
javazoom.jl.player.FactoryRegistry:
    public void removeFactoryType(java.lang.Class)
    public void removeFactory(javazoom.jl.player.AudioDeviceFactory)
javazoom.jl.player.JavaSoundAudioDevice:
    public int millisecondsToBytes(javax.sound.sampled.AudioFormat,int)
javazoom.jl.player.JavaSoundAudioDeviceFactory:
    private static final java.lang.String DEVICE_CLASS_NAME
javazoom.jl.player.NullAudioDevice
javazoom.jl.player.Player
javazoom.jl.player.PlayerApplet
javazoom.jl.player.advanced.AdvancedPlayer
javazoom.jl.player.advanced.PlaybackEvent
javazoom.jl.player.advanced.PlaybackListener
javazoom.jl.player.advanced.jlap
javazoom.jl.player.advanced.jlap$1
javazoom.jl.player.advanced.jlap$InfoListener
javazoom.jl.player.jlp
