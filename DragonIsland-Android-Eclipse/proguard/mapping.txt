com.citex.dragonisland.android.MainActivity -> com.citex.dragonisland.android.MainActivity:
    com.citex.dragonisland.android.drawing.GLSurfaceView mGLSurfaceView -> d
    android.content.res.AssetManager mAssetManager -> a
    android.content.Context mContext -> b
    android.app.Activity mActivity -> c
    void onCreate(android.os.Bundle) -> onCreate
    void addAdvertisement() -> a
    void restart(android.content.Context,int) -> a
    void onBackPressed() -> onBackPressed
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
com.citex.dragonisland.android.audio.Music -> com.citex.dragonisland.android.a.a:
    java.lang.String mPath -> a
    android.media.MediaPlayer mPlayer -> b
    void play(java.lang.String) -> a
    void stop() -> a
    android.media.MediaPlayer access$0() -> b
com.citex.dragonisland.android.audio.Music$1 -> com.citex.dragonisland.android.a.b:
    com.citex.dragonisland.android.audio.Music this$0 -> a
    void onPrepared(android.media.MediaPlayer) -> onPrepared
com.citex.dragonisland.android.audio.SoundEffect -> com.citex.dragonisland.android.a.c:
    android.media.SoundPool mSoundPool -> a
    java.util.HashMap mSoundPoolMap -> b
    void play(java.lang.String) -> a
    void destroy() -> destroy
com.citex.dragonisland.android.drawing.GLSprite -> com.citex.dragonisland.android.b.a:
    int mTextureName -> n
    com.citex.dragonisland.android.drawing.Grid mGrid -> o
    int[] mTextureNameWorkspace -> p
    int[] mCropWorkspace -> q
    int mTextureID -> r
    float uMin -> a
    float vMin -> b
    float uMax -> c
    float vMax -> d
    boolean flipTexture -> e
    void setVertices(javax.microedition.khronos.opengles.GL10,float[]) -> a
    void flipSprite(javax.microedition.khronos.opengles.GL10,boolean) -> a
    void cropSprite(javax.microedition.khronos.opengles.GL10,float,float) -> a
    java.lang.Object clone() -> clone
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getTextureID() -> a
    void setTextureName(int) -> a
    int getTextureName() -> b
    void setGrid(com.citex.dragonisland.android.drawing.Grid) -> a
    com.citex.dragonisland.android.drawing.Grid getGrid() -> c
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void draw(javax.microedition.khronos.opengles.GL10,float,int,int) -> a
    void draw(java.lang.Object,float,float) -> a
    void draw(java.lang.Object,float,float,float,float) -> a
    void draw(java.lang.Object,char,float,float) -> a
    void draw(java.lang.Object,char,float,float,float,float,float) -> a
    int loadBitmap(javax.microedition.khronos.opengles.GL10,java.lang.String) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> b
    com.citex.dragonisland.core.drawing.IBufferedImage getSubImage(java.lang.Object,int,int,int,int) -> a
    float[] createClip(float,float,float,float) -> a
com.citex.dragonisland.android.drawing.GLSurfaceView -> com.citex.dragonisland.android.b.b:
    java.util.concurrent.Semaphore sEglSemaphore -> a
    boolean mSizeChanged -> b
    android.view.SurfaceHolder mHolder -> c
    com.citex.dragonisland.android.drawing.GLSurfaceView$GLThread mGLThread -> d
    com.citex.dragonisland.android.drawing.GLSurfaceView$GLWrapper mGLWrapper -> e
    void init() -> e
    void setRenderer(com.citex.dragonisland.android.drawing.GLSurfaceView$Renderer) -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> a
    void onResume() -> b
    void queueEvent(java.lang.Runnable) -> a
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void clearEvent() -> c
    void onDetachedFromWindow() -> onDetachedFromWindow
    com.citex.dragonisland.android.drawing.GLSurfaceView$GLWrapper access$0(com.citex.dragonisland.android.drawing.GLSurfaceView) -> a
    java.util.concurrent.Semaphore access$1() -> d
    boolean access$2(com.citex.dragonisland.android.drawing.GLSurfaceView) -> b
    void access$3(com.citex.dragonisland.android.drawing.GLSurfaceView,boolean) -> a
    android.view.SurfaceHolder access$4(com.citex.dragonisland.android.drawing.GLSurfaceView) -> c
com.citex.dragonisland.android.drawing.GLSurfaceView$EglHelper -> com.citex.dragonisland.android.b.c:
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    com.citex.dragonisland.android.drawing.GLSurfaceView this$0 -> f
    void start(int[]) -> a
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    boolean swap() -> a
    void finish() -> b
com.citex.dragonisland.android.drawing.GLSurfaceView$GLThread -> com.citex.dragonisland.android.b.d:
    boolean mDone -> c
    boolean mPaused -> d
    boolean mHasFocus -> e
    boolean mHasSurface -> f
    boolean mContextLost -> g
    int mWidth -> h
    int mHeight -> i
    com.citex.dragonisland.android.drawing.GLSurfaceView$Renderer mRenderer -> a
    java.lang.Runnable mEvent -> j
    com.citex.dragonisland.android.drawing.GLSurfaceView$EglHelper mEglHelper -> k
    javax.microedition.khronos.opengles.GL10 gl -> l
    com.citex.dragonisland.android.drawing.GLSurfaceView this$0 -> b
    void run() -> run
    void guardedRun() -> g
    boolean needToWait() -> h
    void surfaceCreated() -> a
    void surfaceDestroyed() -> b
    void onPause() -> c
    void onResume() -> d
    void onWindowFocusChanged(boolean) -> a
    void onWindowResize(int,int) -> a
    void requestExitAndWait() -> e
    void setEvent(java.lang.Runnable) -> a
    void clearEvent() -> f
com.citex.dragonisland.android.drawing.GLSurfaceView$GLWrapper -> com.citex.dragonisland.android.b.e:
    javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL) -> a
com.citex.dragonisland.android.drawing.GLSurfaceView$Renderer -> com.citex.dragonisland.android.b.f:
    int[] getConfigSpec() -> a
    void surfaceCreated(javax.microedition.khronos.opengles.GL10) -> a
    void shutdown(javax.microedition.khronos.opengles.GL10) -> b
    void sizeChanged(javax.microedition.khronos.opengles.GL10,int,int) -> a
    void drawFrame(javax.microedition.khronos.opengles.GL10) -> c
com.citex.dragonisland.android.drawing.GLSurfaceViewRenderer -> com.citex.dragonisland.android.b.g:
    com.citex.dragonisland.core.thread.Main mMain -> c
    com.citex.dragonisland.android.drawing.GLSurfaceView mSurface -> d
    int Width -> a
    int Height -> b
    void surfaceCreated(javax.microedition.khronos.opengles.GL10) -> a
    void sizeChanged(javax.microedition.khronos.opengles.GL10,int,int) -> a
    void drawFrame(javax.microedition.khronos.opengles.GL10) -> c
    int[] getConfigSpec() -> a
    void shutdown(javax.microedition.khronos.opengles.GL10) -> b
    void onBackPressed() -> b
    void onKeyDown(android.view.KeyEvent) -> a
    void onKeyUp(android.view.KeyEvent) -> b
    boolean onTouchEvent(float,float,boolean) -> a
com.citex.dragonisland.android.drawing.Grid -> com.citex.dragonisland.android.b.h:
    java.nio.FloatBuffer mFloatVertexBuffer -> b
    java.nio.FloatBuffer mFloatTexCoordBuffer -> c
    java.nio.FloatBuffer mFloatColorBuffer -> d
    java.nio.IntBuffer mFixedVertexBuffer -> e
    java.nio.IntBuffer mFixedTexCoordBuffer -> f
    java.nio.IntBuffer mFixedColorBuffer -> g
    java.nio.CharBuffer mIndexBuffer -> h
    java.nio.Buffer mVertexBuffer -> i
    java.nio.Buffer mTexCoordBuffer -> j
    java.nio.Buffer mColorBuffer -> k
    int mCoordinateSize -> l
    int mCoordinateType -> m
    int mW -> n
    int mH -> o
    int mIndexCount -> p
    boolean mUseHardwareBuffers -> q
    int mVertBufferIndex -> r
    int mIndexBufferIndex -> s
    int mTextureCoordBufferIndex -> t
    int mColorBufferIndex -> u
    boolean $assertionsDisabled -> a
    void set(int,int,float,float,float,float,float,float[]) -> a
    void beginDrawing(javax.microedition.khronos.opengles.GL10,boolean,boolean) -> a
    void draw(javax.microedition.khronos.opengles.GL10,boolean,boolean) -> b
    void endDrawing(javax.microedition.khronos.opengles.GL10) -> a
    void invalidateHardwareBuffers() -> a
    void releaseHardwareBuffers(javax.microedition.khronos.opengles.GL10) -> b
    void generateHardwareBuffers(javax.microedition.khronos.opengles.GL10) -> c
com.citex.dragonisland.android.drawing.Renderable -> com.citex.dragonisland.android.b.i:
    float x -> f
    float y -> g
    float spriteX -> h
    float spriteY -> i
    float width -> j
    float height -> k
    float spriteWidth -> l
    float spriteHeight -> m
com.citex.dragonisland.android.event.GLSurfaceViewEvent -> com.citex.dragonisland.android.c.a:
    com.citex.dragonisland.android.drawing.GLSurfaceViewRenderer mRenderer -> a
    com.citex.dragonisland.core.thread.Main mMain -> b
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onBackPressed() -> e
    com.citex.dragonisland.core.thread.Main getMain() -> f
com.citex.dragonisland.applet.Main -> com.citex.dragonisland.a.a:
    com.citex.dragonisland.java.GamePanel mPanel -> a
    int Width -> b
    int Height -> c
    void init() -> init
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
com.citex.dragonisland.core.audio.IMusic -> com.citex.dragonisland.b.a.a:
    void play(java.lang.String) -> a
    void stop() -> a
com.citex.dragonisland.core.audio.ISoundEffect -> com.citex.dragonisland.b.a.b:
    void play(java.lang.String) -> a
    void destroy() -> destroy
com.citex.dragonisland.core.drawing.Background -> com.citex.dragonisland.b.b.a:
    int[] mIndex -> a
    com.citex.dragonisland.core.drawing.IBufferedImage[] mImage -> b
    float[] mX -> c
    float[] mY -> d
    int mWidth -> e
    int mHeight -> f
    float[] mScroll -> g
    int mAlign -> h
    com.citex.dragonisland.core.drawing.Color mColor -> i
    void setLayerSpeed(int,float) -> a
    com.citex.dragonisland.core.drawing.Point draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void setColor(com.citex.dragonisland.core.drawing.Color) -> a
    com.citex.dragonisland.core.drawing.Color getColor() -> a
    void setAlign(int) -> a
    void setWidth(int) -> b
    void setHeight(int) -> c
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
com.citex.dragonisland.core.drawing.Color -> com.citex.dragonisland.b.b.b:
    int mRed -> a
    int mGreen -> b
    int mBlue -> c
    int getRed() -> a
    int getGreen() -> b
    int getBlue() -> c
com.citex.dragonisland.core.drawing.Debug -> com.citex.dragonisland.b.b.c:
    com.citex.dragonisland.core.thread.Main mMain -> a
    void draw(java.lang.Object,int,int) -> a
com.citex.dragonisland.core.drawing.GameFont -> com.citex.dragonisland.b.b.d:
    com.citex.dragonisland.core.sprite.SpriteSheet[] mSpriteSheet -> a
    int[][] mCharacterWidth -> b
    void drawString(java.lang.Object,int,java.lang.String,float,float) -> a
    void drawString(java.lang.Object,java.lang.String,int,int,com.citex.dragonisland.core.drawing.Color) -> a
    void drawString(java.lang.Object,java.lang.String,int,int) -> a
    void drawCharacter(java.lang.Object,int,int,float,float) -> a
    int getStringWidth(java.lang.String) -> a
    char getCharacter(int) -> a
    int getFrameNumber(char) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
com.citex.dragonisland.core.drawing.IBufferedImage -> com.citex.dragonisland.b.b.e:
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void draw(java.lang.Object,float,float) -> a
    void draw(java.lang.Object,char,float,float) -> a
    void draw(java.lang.Object,char,float,float,float,float,float) -> a
    void draw(java.lang.Object,float,float,float,float) -> a
    com.citex.dragonisland.core.drawing.IBufferedImage getSubImage(java.lang.Object,int,int,int,int) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> b
com.citex.dragonisland.core.drawing.Point -> com.citex.dragonisland.b.b.f:
    float x -> a
    float y -> b
com.citex.dragonisland.core.drawing.Rectangle -> com.citex.dragonisland.b.b.g:
    float x -> a
    float y -> b
    float width -> c
    float height -> d
    boolean intersects(com.citex.dragonisland.core.drawing.Rectangle) -> a
com.citex.dragonisland.core.game.Control -> com.citex.dragonisland.b.c.a:
    boolean up -> a
    boolean down -> b
    boolean left -> c
    boolean right -> d
    boolean jump -> e
    boolean fire -> f
    boolean undo -> g
    int directionHeld -> h
    void setControl(float,float,boolean) -> a
    void setControl(int,boolean) -> a
    void reset() -> a
    void setDirectionHeld(float) -> a
    boolean isLetterOrDigit(int) -> a
    void drawTouchScreen(java.lang.Object,java.util.ArrayList) -> a
com.citex.dragonisland.core.game.GameData -> com.citex.dragonisland.b.c.b:
    int game -> a
    int world -> b
    int level -> c
    int character -> d
    int size -> e
    int lives -> f
    int coins -> g
    int score -> h
com.citex.dragonisland.core.game.GameFolder -> com.citex.dragonisland.b.c.c:
    java.lang.String mName -> c
    java.util.ArrayList mLevel -> a
    java.util.ArrayList mWorlds -> b
    java.lang.String getName() -> a
    java.util.ArrayList getLevels() -> b
    java.util.ArrayList getWorlds() -> c
com.citex.dragonisland.core.game.GameMode -> com.citex.dragonisland.b.c.d:
    com.citex.dragonisland.core.game.GameMode ANDROID -> a
    com.citex.dragonisland.core.game.GameMode JAVA -> b
    com.citex.dragonisland.core.game.GameMode APPLET -> c
    com.citex.dragonisland.core.game.GameMode[] ENUM$VALUES -> d
com.citex.dragonisland.core.game.ResourceType -> com.citex.dragonisland.b.c.e:
    com.citex.dragonisland.core.game.ResourceType IMAGE -> a
    com.citex.dragonisland.core.game.ResourceType FONT -> b
    com.citex.dragonisland.core.game.ResourceType PLAYER -> c
    com.citex.dragonisland.core.game.ResourceType ENTITY -> d
    com.citex.dragonisland.core.game.ResourceType GUI -> e
    com.citex.dragonisland.core.game.ResourceType TILESET -> f
    com.citex.dragonisland.core.game.ResourceType BACKGROUND -> g
    com.citex.dragonisland.core.game.ResourceType TRANSITION -> h
    com.citex.dragonisland.core.game.ResourceType SOUND -> i
    com.citex.dragonisland.core.game.ResourceType CREDITS -> j
    com.citex.dragonisland.core.game.ResourceType[] ENUM$VALUES -> k
com.citex.dragonisland.core.game.SaveFile -> com.citex.dragonisland.b.c.f:
    java.util.ArrayList mSaveGame -> a
    java.util.ArrayList mGameFolder -> b
    java.lang.String mPath -> c
    void initGameList(java.lang.String) -> b
    void initSaveGame(java.lang.String) -> c
    com.citex.dragonisland.core.game.GameData loadGameData(java.lang.String) -> a
    void saveGameData(java.lang.String,com.citex.dragonisland.core.game.GameData) -> a
    java.util.ArrayList getGameFolders(boolean) -> a
    com.citex.dragonisland.core.game.GameData getSaveGame(int) -> a
    void setSaveGame(int,com.citex.dragonisland.core.game.GameData) -> a
    java.lang.String getSaveGameDescription(int) -> b
com.citex.dragonisland.core.game.Score -> com.citex.dragonisland.b.c.g:
    int value -> a
    int timer -> b
    int x -> c
    int y -> d
com.citex.dragonisland.core.game.Settings -> com.citex.dragonisland.b.c.h:
    int ScreenWidth -> a
    int ScreenHeight -> b
    boolean Music -> c
    boolean Sound -> d
    boolean DebugMenu -> e
    boolean LevelSelect -> f
    boolean LevelEditor -> g
    boolean Invincible -> h
    boolean FreezeTime -> i
    boolean InfiniteLives -> j
    boolean Powerups -> k
    float GameSpeed -> l
    int MusicTest -> m
    int SoundTest -> n
    boolean Animation -> o
    boolean Background -> p
    boolean RemoveEnemies -> q
    boolean DebugMode -> r
    int JumpHeight -> s
    boolean EditMainGame -> t
    int[] HighScore -> u
    java.lang.String State -> v
    boolean Paused -> w
    boolean ShowLevelSelect -> x
    java.lang.String GameVersion -> y
    java.lang.String ResourcePath -> z
    java.lang.String InternalStorageFolder -> A
    com.citex.dragonisland.core.game.GameMode Mode -> B
    java.lang.Boolean ShowControls -> C
    void loadSettings(java.lang.String) -> a
    void saveSettings(java.lang.String) -> b
com.citex.dragonisland.core.game.Timing -> com.citex.dragonisland.b.c.i:
    long mCurrentTime -> a
    long mLastUpdateTime -> b
    float getDeltaTime() -> b
    long getCurrentTime() -> c
    void setCurrentTime(long) -> a
    long getLastUpdateTime() -> d
    void setLastUpdateTime(long) -> b
com.citex.dragonisland.core.game.Transition -> com.citex.dragonisland.b.c.j:
    com.citex.dragonisland.core.drawing.IBufferedImage mTransition -> a
    float mTimer -> b
    boolean mRunning -> c
    void draw(java.lang.Object,float) -> a
    boolean isFinished() -> a
    void start() -> b
    float getTimer() -> c
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
com.citex.dragonisland.core.game.World -> com.citex.dragonisland.b.c.k:
    int mLevels -> a
    void addLevel() -> a
    int getLevels() -> b
com.citex.dragonisland.core.level.Header -> com.citex.dragonisland.b.d.a:
    java.lang.String name -> a
    int world -> b
    int level -> c
    int area -> d
    int timeLimit -> e
    int[] bg -> f
    com.citex.dragonisland.core.drawing.Color bgColor -> g
    float[] bgSpeed -> h
    int bgAlign -> i
    int music -> j
    int tileset0 -> k
    int tileset16 -> l
    int tileset32 -> m
    int width -> n
    int height -> o
    int objectCount -> p
    int entityCount -> q
    int startState -> r
    int startX -> s
    int startY -> t
    int endState -> u
    int endX -> v
    int endY -> w
    int endWorld -> x
    int endLevel -> y
    int endArea -> z
    int bonusX -> A
    int bonusY -> B
    int bonusState -> C
com.citex.dragonisland.core.level.Level -> com.citex.dragonisland.b.d.b:
    com.citex.dragonisland.core.level.Header mHeader -> a
    java.util.ArrayList mTiles -> b
    java.util.ArrayList mEntities -> c
    java.util.ArrayList mEntityDefinitions -> d
    java.util.ArrayList mTileDefinitions -> e
    com.citex.dragonisland.core.level.Map mMap -> f
    com.citex.dragonisland.core.level.Header getHeader() -> a
    com.citex.dragonisland.core.tileset.TileDescription getTileDescription(int) -> a
    void removeTile(int) -> b
    void addTile(int,int,int,int,int,int) -> a
    com.citex.dragonisland.core.level.Map getMap() -> b
    com.citex.dragonisland.core.sprite.entity.EntityDescription getEntityDescription(int) -> c
    java.util.ArrayList getEntityDescriptions() -> c
    void setEntityDescription(int,com.citex.dragonisland.core.sprite.entity.EntityDescription) -> a
    void removeEntity(int) -> d
    void addEntity(int,int,int,char,int) -> a
    int getObjectCount() -> d
    void removeCastle() -> e
    com.citex.dragonisland.core.level.Map toMap() -> f
    void loadLegacyLevel(com.citex.dragonisland.core.game.GameFolder,java.lang.String) -> a
    void loadLevel(com.citex.dragonisland.core.game.GameFolder,java.lang.String) -> b
    void newLevel() -> g
    void saveLevel(java.lang.String) -> a
    java.lang.String[] getTileStringDescription(int,int) -> a
    java.lang.String[] getEntityStringDescription(int) -> e
    void initTileDefinitions() -> h
com.citex.dragonisland.core.level.Map -> com.citex.dragonisland.b.d.c:
    com.citex.dragonisland.core.tileset.Tile[][] mTile -> a
    com.citex.dragonisland.core.level.Header mHeader -> b
    com.citex.dragonisland.core.tileset.Tile getTile(int,int) -> a
    void removeTile(float,float) -> a
    void setObjectTile(int,com.citex.dragonisland.core.tileset.TileDescription) -> a
    void setEntityTile(int,com.citex.dragonisland.core.sprite.entity.EntityDescription) -> a
    int getHeight() -> a
    int getWidth() -> b
    int getEndX() -> c
    int getEndY() -> d
    com.citex.dragonisland.core.sprite.player.enums.PipeState getEndState() -> e
    int getBonusX() -> f
    int getBonusY() -> g
    com.citex.dragonisland.core.sprite.player.enums.PipeState getBonusState() -> h
    boolean isTiledTerrain(int,int) -> b
    boolean isBlock(int,int) -> c
    boolean isAnimated(int,int) -> d
    boolean isInvisible(int,int) -> e
    boolean isCoin(int,int) -> f
    boolean isEmptyBlock(int,int) -> g
    boolean isCoinBlock(int,int) -> h
    boolean is10CoinBlock(int,int) -> i
    boolean isMushroomBlock(int,int) -> j
    boolean isFireBlock(int,int) -> k
    boolean isInvincibleBlock(int,int) -> l
    boolean isExtraLifeBlock(int,int) -> m
    boolean isVineBlock(int,int) -> n
com.citex.dragonisland.core.panel.Game -> com.citex.dragonisland.b.e.a:
    com.citex.dragonisland.core.thread.Main mMain -> a
    boolean mTransition -> b
    java.util.ArrayList mEntity -> c
    java.util.ArrayList mPoints -> d
    java.lang.String mState -> e
    int mOptions -> f
    int mSelectedOption -> g
    float mTimer -> h
    com.citex.dragonisland.core.drawing.Point mCastlePosition -> i
    int mCreditScroll -> j
    void initEntities() -> a
    void paintComponent(java.lang.Object,float) -> a
    void addExplosion(float,float) -> a
    void addEntity(int,char,int,float,float) -> a
    void addPoints(com.citex.dragonisland.core.game.Score) -> a
    void drawLives(java.lang.Object,int,int,int) -> a
    void drawCoins(java.lang.Object,int,int,int) -> b
    void drawCredits(java.lang.Object,float) -> b
    void drawOptions(java.lang.Object) -> a
    void drawPaused(java.lang.Object) -> b
    void drawPoints(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void drawScore(java.lang.Object,int,int,int) -> c
    void drawTime(java.lang.Object,int,int,int) -> d
    void drawFrame(java.awt.Graphics) -> a
    void drawFrame(javax.microedition.khronos.opengles.GL10) -> a
    void onKeyDown(int,boolean) -> a
    void onTouchEvent(float,float,boolean) -> a
    void onBackPressed() -> e
    void mousePressed(java.awt.event.MouseEvent) -> a
    void controlInput() -> f
    void controlInputPause(float,float,int) -> a
    void controlInputOptions(float,float,int) -> b
    void setState(java.lang.String) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> b
com.citex.dragonisland.core.panel.LevelEditor -> com.citex.dragonisland.b.e.b:
    com.citex.dragonisland.core.thread.Main mMain -> a
    com.citex.dragonisland.core.level.Level mLevel -> b
    java.lang.String mState -> c
    int mOptions -> d
    int mSelectedOption -> e
    com.citex.dragonisland.core.drawing.Background mBackground -> f
    com.citex.dragonisland.core.tileset.Tileset mTileset -> g
    int mEditorState -> h
    java.lang.String mSelectionDescription -> i
    com.citex.dragonisland.core.tileset.Tile mTile -> j
    com.citex.dragonisland.core.drawing.Point mMouse -> k
    com.citex.dragonisland.core.drawing.Point mMouseDragged -> l
    java.awt.Rectangle mMouseTile -> m
    java.awt.Rectangle mMouseCursor -> n
    java.awt.Rectangle mMouseSelection -> o
    int mMouseClick -> p
    float mSavingTimer -> q
    boolean mTransition -> r
    void paintComponent(java.awt.Graphics2D,float) -> a
    void drawFrame(java.awt.Graphics) -> a
    void onKeyDown(int,boolean) -> a
    void loadLevel(java.lang.String) -> a
    void saveLevel() -> a
    void setBackground(com.citex.dragonisland.core.level.Header) -> a
    void setTileset(com.citex.dragonisland.core.level.Header) -> b
    void changeEditorState() -> e
    void nextObject() -> f
    void previousObject() -> g
    void nextSprite() -> h
    void previousSprite() -> i
    void drawGrid(java.awt.Graphics) -> b
    void drawSettings(java.lang.Object) -> a
    void drawBackgroundRGB(java.lang.Object) -> b
    void drawBackgroundSpeed(java.lang.Object) -> c
    void drawPaused(java.lang.Object) -> d
    void drawSaving(java.lang.Object,float) -> a
    java.lang.String getStateDesc(int) -> a
    void mouseMoved(java.awt.event.MouseEvent) -> a
    void mousePressed(java.awt.event.MouseEvent) -> b
    void mouseReleased(java.awt.event.MouseEvent) -> c
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> a
    void mouseDragged(java.awt.event.MouseEvent) -> d
com.citex.dragonisland.core.panel.LevelLoading -> com.citex.dragonisland.b.e.c:
    com.citex.dragonisland.core.thread.Main mMain -> a
    java.util.ArrayList mResources -> b
    java.lang.Object mSurface -> c
    int mCount -> d
    int mTotal -> e
    float mProgress -> f
    boolean mInitResources -> g
    java.lang.String mLevel -> h
    boolean mDisplay -> i
    void initResources(java.lang.Object) -> a
    void paintComponent(java.lang.Object,float) -> a
    void drawFrame(java.awt.Graphics) -> a
    void drawFrame(javax.microedition.khronos.opengles.GL10) -> a
    int getProgress() -> a
    com.citex.dragonisland.core.thread.Main access$0(com.citex.dragonisland.core.panel.LevelLoading) -> a
com.citex.dragonisland.core.panel.LevelLoading$1 -> com.citex.dragonisland.b.e.d:
    com.citex.dragonisland.core.panel.LevelLoading this$0 -> a
    void run() -> run
com.citex.dragonisland.core.panel.LevelSelect -> com.citex.dragonisland.b.e.e:
    com.citex.dragonisland.core.thread.Main mMain -> a
    boolean mTransition -> b
    int mSelectedWorld -> c
    int mUnlockedLevels -> d
    void paintComponent(java.lang.Object,float) -> a
    void drawFrame(java.awt.Graphics) -> a
    void drawFrame(javax.microedition.khronos.opengles.GL10) -> a
    void onKeyDown(int,boolean) -> a
    void controlInput() -> a
    void onTouchEvent(float,float,boolean) -> a
    void mousePressed(java.awt.event.MouseEvent) -> a
    void onBackPressed() -> e
    void controlInput(float,float) -> a
com.citex.dragonisland.core.panel.License -> com.citex.dragonisland.b.e.f:
    com.citex.dragonisland.core.thread.Main mMain -> a
    java.util.ArrayList mResources -> b
    java.lang.Object mSurface -> c
    int mCount -> d
    int mTotal -> e
    float mProgress -> f
    boolean mInitResources -> g
    void initResources(java.lang.Object) -> a
    void paintComponent(java.lang.Object,float) -> a
    void drawFrame(java.awt.Graphics) -> a
    void drawFrame(javax.microedition.khronos.opengles.GL10) -> a
    int getProgress() -> a
com.citex.dragonisland.core.panel.TitleScreen -> com.citex.dragonisland.b.e.g:
    com.citex.dragonisland.core.thread.Main mMain -> a
    int mOptions -> b
    int mSelectedOption -> c
    java.lang.String mState -> d
    java.lang.String mFolderName -> e
    int mCharacter -> f
    boolean mTransition -> g
    boolean mResolutionChanged -> h
    void paintComponent(java.lang.Object,float) -> a
    void drawFrame(java.awt.Graphics) -> a
    void drawFrame(javax.microedition.khronos.opengles.GL10) -> a
    void drawHighScore(java.lang.Object,float,float,int) -> a
    void onKeyDown(int,boolean) -> a
    void onTouchEvent(float,float,boolean) -> a
    void onBackPressed() -> a
    void mousePressed(java.awt.event.MouseEvent) -> a
    void controlInput() -> e
    void controlInputMain(float,float,int) -> a
    void controlInputSelectGame(float,float,int) -> b
    void controlInputEditor(float,float,int) -> c
    void controlInputOptions(float,float,int) -> d
    void controlHighScores(float,float,int) -> e
    void newGame() -> f
    void selectGame() -> g
com.citex.dragonisland.core.sprite.Frame -> com.citex.dragonisland.b.f.a:
    int start -> a
    int end -> b
    int bX -> c
    int bY -> d
    int bW -> e
    int bH -> f
    java.lang.String state -> g
    int index -> h
com.citex.dragonisland.core.sprite.Sprite -> com.citex.dragonisland.b.f.b:
    com.citex.dragonisland.core.sprite.SpriteSheet mSpriteSheet -> b
    com.citex.dragonisland.core.drawing.Point mPosition -> c
    com.citex.dragonisland.core.drawing.Point mStartPosition -> d
    com.citex.dragonisland.core.drawing.Point mVelocity -> e
    java.util.ArrayList mFrameInfo -> f
    com.citex.dragonisland.core.sprite.Frame mFrame -> g
    float mFrameIndex -> h
    float mFrameTimer -> i
    char mDirection -> j
    com.citex.dragonisland.core.drawing.Point mMinMovement -> k
    com.citex.dragonisland.core.drawing.Point mMaxMovement -> l
    boolean mJumping -> m
    boolean mRotate -> a
    float mAngle -> n
    boolean mSpinOffScreen -> o
    boolean mDead -> p
    float mAnimationSpeed -> q
    boolean mFireInvulnerable -> r
    float mRotationSpeed -> s
    float mTurnTimer -> t
    void initSprite() -> a
    void loadSprite(java.lang.Object,java.lang.String) -> a
    void moveSpin(float,com.citex.dragonisland.core.drawing.Point) -> a_
    void setSprite(com.citex.dragonisland.core.sprite.Sprite) -> a
    com.citex.dragonisland.core.sprite.SpriteSheet getSpriteSheet() -> b
    void draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void draw(java.lang.Object,char,float,com.citex.dragonisland.core.drawing.Point) -> a
    void draw(java.lang.Object,float,char,com.citex.dragonisland.core.drawing.Point) -> a
    void draw(java.lang.Object,float,int,float,float,float,float) -> a
    void draw(java.lang.Object,float,int,int,char) -> a
    void draw(java.lang.Object,float,int,int,char,int) -> a
    float calculateAngle(float,float,float) -> a
    float getAngle() -> c
    int getFrameHeight() -> d
    int getFrameWidth() -> e
    void setDirection(char) -> a
    void setAngle(int) -> a
    char getDirection() -> f
    com.citex.dragonisland.core.sprite.Frame getFrame() -> g
    java.util.ArrayList getFrameInfo() -> h
    boolean setAnimationState(java.lang.String) -> a
    java.lang.String getAnimationState() -> i
    void animate(float) -> a
    void moveUp(float,float) -> a
    void moveDown(float,float) -> b
    void moveLeft(float,float) -> c
    void moveRight(float,float) -> d
    void turn() -> j
    com.citex.dragonisland.core.drawing.Point getCenter() -> k
    int getCenterX() -> l
    int getCenterY() -> m
    int getWidth() -> n
    int getHeight() -> o
    com.citex.dragonisland.core.drawing.Rectangle getBounds() -> p
    int getLeft() -> q
    int getRight() -> r
    int getUp() -> s
    int getDown() -> t
    java.lang.String getState() -> u
    float getFrameIndex() -> v
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
    com.citex.dragonisland.core.drawing.Point getVelocity() -> w
    void setVelocity(com.citex.dragonisland.core.drawing.Point) -> a
    com.citex.dragonisland.core.drawing.Point getStartPosition() -> x
    void setPosition(com.citex.dragonisland.core.drawing.Point) -> b
    com.citex.dragonisland.core.drawing.Point getPosition() -> y
    boolean isInScreenArea(com.citex.dragonisland.core.drawing.Point,int) -> a
    boolean getFireInvulnerable() -> z
    void setFireInvulnerable(boolean) -> a
    com.citex.dragonisland.core.drawing.Point setMaxMove() -> A
    com.citex.dragonisland.core.drawing.Point getMaxMove() -> B
    com.citex.dragonisland.core.drawing.Point setMinMove() -> C
    com.citex.dragonisland.core.drawing.Point getMinMove() -> D
    void setJump(boolean) -> b
    boolean getJump() -> E
    void setRotate(boolean,float) -> a
    void setX(float) -> b
    float getX() -> F
    float getY() -> G
    java.lang.Object clone(int,int,int) -> a
    void alive() -> H
    void kill() -> I
    void spinOffScreen(char) -> b
    boolean getSpinOffScreen() -> J
    boolean isDead() -> K
    void setAnimationSpeed(float) -> c
com.citex.dragonisland.core.sprite.SpriteSheet -> com.citex.dragonisland.b.f.c:
    com.citex.dragonisland.core.drawing.IBufferedImage mSpriteSheet -> a
    com.citex.dragonisland.core.drawing.IBufferedImage[] mFrames -> b
    int mFrameWidth -> c
    int mFrameHeight -> d
    int mSheetWidth -> e
    int mSheetHeight -> f
    int mRows -> g
    int mColumns -> h
    int mFrameCount -> i
    com.citex.dragonisland.core.drawing.IBufferedImage getFrameFromSheet(java.lang.Object,int) -> a
    void drawFrame(java.lang.Object,int,float,float) -> a
    void drawFrame(java.lang.Object,int,float,float,float,float) -> a
    void drawFrame(java.lang.Object,int,char,float,int,int,int,int) -> a
    com.citex.dragonisland.core.drawing.IBufferedImage getFrame(int,char) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
    int getFrameWidth() -> a
    int getFrameHeight() -> b
com.citex.dragonisland.core.sprite.SpriteSheetDefinition -> com.citex.dragonisland.b.f.d:
    int mIndex -> a
    java.lang.String mDescription -> b
    int mFrameWidth -> c
    int mFrameHeight -> d
    int mFrameCount -> e
    java.util.ArrayList getSpriteDefinitions(java.lang.String) -> a
com.citex.dragonisland.core.sprite.entity.EntityDescription -> com.citex.dragonisland.b.f.a.a:
    java.lang.String name -> a
    int x -> b
    int y -> c
    int tileWidth -> d
    int tileHeight -> e
    int tile -> f
    int collision -> g
    char direction -> h
    int angle -> i
com.citex.dragonisland.core.sprite.entity.IEntity -> com.citex.dragonisland.b.f.a.b:
    void draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void draw(java.lang.Object,float,int,int,char) -> a
    void draw(java.lang.Object,float,int,int,char,int) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void animate(float) -> a
    com.citex.dragonisland.core.drawing.Rectangle getBounds() -> p
    boolean isDead() -> K
    boolean isInScreenArea(com.citex.dragonisland.core.drawing.Point,int) -> a
    boolean getFireInvulnerable() -> z
    java.lang.String getAnimationState() -> i
    void setDirection(char) -> a
    void setAngle(int) -> a
    char getDirection() -> f
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
    boolean getSpinOffScreen() -> J
    java.lang.Object clone(int,int,int) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
com.citex.dragonisland.core.sprite.entity.enemy.Beetle -> com.citex.dragonisland.b.f.a.a.a:
    com.citex.dragonisland.core.thread.Main mMain -> b
    float mHitTimer -> c
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void kick(com.citex.dragonisland.core.sprite.player.Player) -> b
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.FallingBlock -> com.citex.dragonisland.b.f.a.a.b:
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.FlyingTurtle -> com.citex.dragonisland.b.f.a.a.c:
    com.citex.dragonisland.core.thread.Main mMain -> b
    float mHitTimer -> c
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void kick(com.citex.dragonisland.core.sprite.player.Player) -> b
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.Gremlin -> com.citex.dragonisland.b.f.a.a.d:
    com.citex.dragonisland.core.thread.Main mMain -> b
    float mHitTimer -> c
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.JumpingLava -> com.citex.dragonisland.b.f.a.a.e:
    float mTimer -> b
    float mStartTime -> c
    int mIndex -> d
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    java.lang.Object clone(int,int,int) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.PiranhaPlant -> com.citex.dragonisland.b.f.a.a.f:
    com.citex.dragonisland.core.thread.Main mMain -> b
    float mMoveTimer -> c
    boolean mPlayerNear -> d
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    java.lang.Object clone(int,int,int) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.Robot -> com.citex.dragonisland.b.f.a.a.g:
    com.citex.dragonisland.core.thread.Main mMain -> b
    float mHitTimer -> c
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.SpinyBeetle -> com.citex.dragonisland.b.f.a.a.h:
    com.citex.dragonisland.core.thread.Main mMain -> b
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.enemy.Turtle -> com.citex.dragonisland.b.f.a.a.i:
    com.citex.dragonisland.core.thread.Main mMain -> b
    float mHitTimer -> c
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void kick(com.citex.dragonisland.core.sprite.player.Player) -> b
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.object.CastleFlag -> com.citex.dragonisland.b.f.a.b.a:
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    java.lang.Object clone(int,int,int) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.object.Fireball -> com.citex.dragonisland.b.f.a.b.b:
    float mMinMove -> b
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.object.Flag -> com.citex.dragonisland.b.f.a.b.c:
    boolean mFall -> b
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    java.lang.Object clone() -> clone
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.object.FlagPole -> com.citex.dragonisland.b.f.a.b.d:
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.object.Vine -> com.citex.dragonisland.b.f.a.b.e:
    void draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    com.citex.dragonisland.core.drawing.Rectangle getBounds() -> p
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.powerup.ExtraLife -> com.citex.dragonisland.b.f.a.c.a:
    com.citex.dragonisland.core.thread.Main mMain -> b
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.powerup.Flower -> com.citex.dragonisland.b.f.a.c.b:
    com.citex.dragonisland.core.thread.Main mMain -> b
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.powerup.Mushroom -> com.citex.dragonisland.b.f.a.c.c:
    com.citex.dragonisland.core.thread.Main mMain -> b
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.entity.powerup.Star -> com.citex.dragonisland.b.f.a.c.d:
    com.citex.dragonisland.core.thread.Main mMain -> b
    void move(float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectMapCollision(com.citex.dragonisland.core.level.Map) -> a
    void draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void detectPlayerCollision(com.citex.dragonisland.core.sprite.player.Player) -> a
    void detectEntityCollision(java.util.ArrayList,com.citex.dragonisland.core.drawing.Point) -> a
    void hit(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
com.citex.dragonisland.core.sprite.player.Player -> com.citex.dragonisland.b.f.b.a:
    com.citex.dragonisland.core.thread.Main mMain -> b
    java.util.ArrayList mSprites -> c
    com.citex.dragonisland.core.sprite.SpriteSheet mStars -> d
    com.citex.dragonisland.core.drawing.IBufferedImage mIcon -> e
    int mLives -> f
    int mScore -> g
    int mCoins -> h
    com.citex.dragonisland.core.sprite.player.enums.PlayerSize mSize -> i
    int mInvincible -> j
    float mInvincibleTimer -> k
    int mInvincibleFrame -> l
    boolean mFlicker -> m
    int mTime -> n
    com.citex.dragonisland.core.game.Control mControls -> o
    boolean mJumpReleased -> p
    boolean mCrouchingUnderBlock -> q
    boolean mClimb -> r
    boolean mJumpSfx -> s
    float mFireTimer -> t
    com.citex.dragonisland.core.sprite.player.enums.PipeState mPipeState -> u
    com.citex.dragonisland.core.sprite.player.enums.LevelExit mExit -> v
    com.citex.dragonisland.core.sprite.player.enums.FlagState mFlagState -> w
    boolean mBonusLevel -> x
    com.citex.dragonisland.core.level.Header mLevelHeader -> y
    float mClockTimer -> z
    float mVictoryTimer -> A
    boolean mBounce -> B
    boolean mUsedBonus -> C
    void init(com.citex.dragonisland.core.level.Header,com.citex.dragonisland.core.game.GameData) -> a
    void draw(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> a
    void move(float,com.citex.dragonisland.core.drawing.Point) -> b
    void movePipe(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> b
    void setTime(float) -> d
    void setMovement(java.lang.Object,float) -> a
    void drawInvincible(java.lang.Object,float,com.citex.dragonisland.core.drawing.Point) -> c
    void detectMapCollision(java.lang.Object,com.citex.dragonisland.core.level.Map) -> a
    void detectPipeCollision(java.lang.Object,com.citex.dragonisland.core.level.Map,com.citex.dragonisland.core.drawing.Point) -> a
    void enemyCollision() -> L
    void bounce() -> M
    void die() -> N
    void addCoin() -> O
    void addLives(int) -> b
    void addScore(int) -> c
    com.citex.dragonisland.core.game.Control getControls() -> P
    void setControl(float,float,boolean) -> a
    void setControl(int,boolean) -> a
    int getCoins() -> Q
    int getLives() -> R
    com.citex.dragonisland.core.sprite.player.enums.PipeState getPipeState() -> S
    int getScore() -> T
    com.citex.dragonisland.core.sprite.player.enums.PlayerSize getSize() -> U
    int getTime() -> V
    com.citex.dragonisland.core.drawing.IBufferedImage getIcon() -> W
    void setInvincible(int) -> d
    int getInvincible() -> X
    boolean getClimb() -> Y
    void setClimb(boolean) -> c
    void reset() -> Z
    void setHighScore() -> aa
    void kill() -> I
    void setSize(com.citex.dragonisland.core.sprite.player.enums.PlayerSize) -> a
    com.citex.dragonisland.core.sprite.player.enums.FlagState getFlagState() -> ab
    void setFlagState(com.citex.dragonisland.core.sprite.player.enums.FlagState) -> a
    boolean isOnBonus() -> ac
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
com.citex.dragonisland.core.sprite.player.enums.FlagState -> com.citex.dragonisland.b.f.b.a.a:
    com.citex.dragonisland.core.sprite.player.enums.FlagState NONE -> a
    com.citex.dragonisland.core.sprite.player.enums.FlagState SLIDE_DOWN_POLE -> b
    com.citex.dragonisland.core.sprite.player.enums.FlagState JUMP_OFF_POLE -> c
    com.citex.dragonisland.core.sprite.player.enums.FlagState VICTORY -> d
    com.citex.dragonisland.core.sprite.player.enums.FlagState WALK_TO_CASTLE -> e
    com.citex.dragonisland.core.sprite.player.enums.FlagState[] ENUM$VALUES -> f
com.citex.dragonisland.core.sprite.player.enums.LevelExit -> com.citex.dragonisland.b.f.b.a.b:
    com.citex.dragonisland.core.sprite.player.enums.LevelExit NONE -> a
    com.citex.dragonisland.core.sprite.player.enums.LevelExit EXIT_BONUS -> b
    com.citex.dragonisland.core.sprite.player.enums.LevelExit EXIT_LEVEL -> c
    com.citex.dragonisland.core.sprite.player.enums.LevelExit[] ENUM$VALUES -> d
com.citex.dragonisland.core.sprite.player.enums.PipeState -> com.citex.dragonisland.b.f.b.a.c:
    com.citex.dragonisland.core.sprite.player.enums.PipeState NONE -> a
    com.citex.dragonisland.core.sprite.player.enums.PipeState STAND_LEFT -> b
    com.citex.dragonisland.core.sprite.player.enums.PipeState STAND_RIGHT -> c
    com.citex.dragonisland.core.sprite.player.enums.PipeState UP_PIPE -> d
    com.citex.dragonisland.core.sprite.player.enums.PipeState DOWN_PIPE -> e
    com.citex.dragonisland.core.sprite.player.enums.PipeState LEFT_PIPE -> f
    com.citex.dragonisland.core.sprite.player.enums.PipeState RIGHT_PIPE -> g
    com.citex.dragonisland.core.sprite.player.enums.PipeState[] ENUM$VALUES -> h
    com.citex.dragonisland.core.sprite.player.enums.PipeState[] values() -> a
com.citex.dragonisland.core.sprite.player.enums.PlayerSize -> com.citex.dragonisland.b.f.b.a.d:
    com.citex.dragonisland.core.sprite.player.enums.PlayerSize SMALL -> a
    com.citex.dragonisland.core.sprite.player.enums.PlayerSize LARGE -> b
    com.citex.dragonisland.core.sprite.player.enums.PlayerSize FIRE -> c
    com.citex.dragonisland.core.sprite.player.enums.PlayerSize[] ENUM$VALUES -> d
    com.citex.dragonisland.core.sprite.player.enums.PlayerSize[] values() -> a
com.citex.dragonisland.core.thread.Main -> com.citex.dragonisland.b.g.a:
    java.util.ArrayList mImage -> a
    java.util.ArrayList mFont -> b
    java.util.ArrayList mEntity -> c
    java.util.ArrayList mPlayer -> d
    java.util.ArrayList mGui -> e
    com.citex.dragonisland.core.tileset.Tileset mTileset -> f
    com.citex.dragonisland.core.level.Level mLevel -> g
    com.citex.dragonisland.core.drawing.Background mBackground -> h
    com.citex.dragonisland.core.game.Transition mTransition -> i
    java.util.ArrayList mCredits -> j
    com.citex.dragonisland.core.game.SaveFile mSaveFile -> k
    java.lang.Thread mThread -> l
    com.citex.dragonisland.core.panel.License mLicense -> m
    com.citex.dragonisland.core.panel.TitleScreen mTitleScreen -> n
    com.citex.dragonisland.core.panel.LevelLoading mLevelLoading -> o
    com.citex.dragonisland.core.panel.LevelSelect mLevelSelect -> p
    com.citex.dragonisland.core.panel.Game mGame -> q
    com.citex.dragonisland.core.panel.LevelEditor mEditor -> r
    int mGameFolder -> s
    com.citex.dragonisland.core.game.Control mControl -> t
    com.citex.dragonisland.core.drawing.Point mCamera -> u
    com.citex.dragonisland.core.drawing.Debug mDebug -> v
    com.citex.dragonisland.core.audio.IMusic mMusic -> w
    com.citex.dragonisland.core.audio.ISoundEffect mSoundEffect -> x
    java.lang.Object mSurface -> y
    com.citex.dragonisland.android.MainActivity mActivity -> z
    java.lang.Object mFrame -> A
    java.lang.String mLevelPath -> B
    boolean mRunning -> C
    void start() -> a
    void run() -> run
    com.citex.dragonisland.android.MainActivity getActivity() -> b
    java.util.ArrayList getImages() -> c
    com.citex.dragonisland.core.drawing.IBufferedImage getImage(int) -> a
    void setImage(com.citex.dragonisland.core.drawing.IBufferedImage) -> a
    com.citex.dragonisland.core.drawing.GameFont getGameFont(int) -> b
    void setGameFont(com.citex.dragonisland.core.drawing.GameFont) -> a
    com.citex.dragonisland.core.sprite.entity.IEntity getEntity(int) -> c
    java.util.ArrayList getEntities() -> d
    void setEntitySprite(com.citex.dragonisland.core.sprite.entity.IEntity) -> a
    com.citex.dragonisland.core.sprite.player.Player getCurrentPlayer() -> e
    java.util.ArrayList getPlayers() -> f
    void setPlayerSprite(com.citex.dragonisland.core.sprite.player.Player) -> a
    com.citex.dragonisland.core.sprite.SpriteSheet getGuiSprite(int) -> d
    void setGuiSprite(com.citex.dragonisland.core.sprite.SpriteSheet) -> a
    com.citex.dragonisland.core.tileset.Tileset getTileset() -> g
    void setTileset(com.citex.dragonisland.core.tileset.Tileset) -> a
    com.citex.dragonisland.core.drawing.Background getBackground() -> h
    void setBackground(com.citex.dragonisland.core.drawing.Background) -> a
    com.citex.dragonisland.core.level.Level getLevel() -> i
    void setLevel(com.citex.dragonisland.core.level.Level) -> a
    com.citex.dragonisland.core.game.Transition getScreenTransition() -> j
    void setSaveFile(com.citex.dragonisland.core.game.SaveFile) -> a
    com.citex.dragonisland.core.game.SaveFile getSaveFile() -> k
    void setScreenTransition(com.citex.dragonisland.core.game.Transition) -> a
    com.citex.dragonisland.core.panel.License getLicense() -> l
    com.citex.dragonisland.core.panel.TitleScreen getTitleScreen() -> m
    com.citex.dragonisland.core.game.Control getControls() -> n
    void setControl(float,float,boolean) -> a
    void setGameFolder(int) -> e
    int getGameFolderIndex() -> o
    com.citex.dragonisland.core.game.GameFolder getGameFolder() -> p
    javax.swing.JFrame getGameFrame() -> q
    com.citex.dragonisland.core.panel.LevelLoading getLevelLoadingScreen() -> r
    com.citex.dragonisland.core.panel.LevelSelect getLevelSelectScreen() -> s
    com.citex.dragonisland.core.panel.Game getGame() -> t
    com.citex.dragonisland.core.panel.LevelEditor getEditor() -> u
    com.citex.dragonisland.core.drawing.Debug getDebug() -> v
    com.citex.dragonisland.core.drawing.Point getCamera() -> w
    void setCamera(com.citex.dragonisland.core.drawing.Point) -> a
    void setLevelPath(java.lang.String) -> a
    com.citex.dragonisland.core.audio.IMusic getMusicPlayer() -> x
    void setSoundEffects(com.citex.dragonisland.core.audio.ISoundEffect) -> a
    com.citex.dragonisland.core.audio.ISoundEffect getSoundEffects() -> y
    java.util.ArrayList getCredits() -> z
    void setCredits(java.util.ArrayList) -> a
    void kill() -> A
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
com.citex.dragonisland.core.thread.Resource -> com.citex.dragonisland.b.g.b:
    com.citex.dragonisland.core.thread.Main mMain -> a
    java.lang.Thread mThread -> b
    java.lang.Object mGraphics -> c
    java.lang.Object mResource -> d
    com.citex.dragonisland.core.game.ResourceType mResourceType -> e
    boolean mRunning -> f
    void start() -> start
    void run() -> run
    boolean isFinished() -> a
    java.util.ArrayList getResourceList() -> b
com.citex.dragonisland.core.tileset.Explosion -> com.citex.dragonisland.b.h.a:
    float x -> a
    float y -> b
    int timer -> c
    char direction -> d
com.citex.dragonisland.core.tileset.Tile -> com.citex.dragonisland.b.h.b:
    int index -> a
    int tileIndex -> b
    int tilesetIndex -> c
    int repeatIndex -> d
    int state -> e
    int count -> f
    int collision -> g
    int offset -> h
    int draw -> i
    int spriteIndex -> j
    int spriteTile -> k
    int spriteDraw -> l
    int width -> m
    int height -> n
    char direction -> o
    int angle -> p
    boolean isGap() -> a
com.citex.dragonisland.core.tileset.TileDescription -> com.citex.dragonisland.b.h.c:
    java.lang.String name -> a
    int x -> b
    int y -> c
    int width -> d
    int height -> e
    int tile -> f
    int tileset -> g
    int tileWidth -> h
    int tileHeight -> i
    int collision -> j
com.citex.dragonisland.core.tileset.Tileset -> com.citex.dragonisland.b.h.d:
    com.citex.dragonisland.core.drawing.IBufferedImage mBlockTileset -> a
    com.citex.dragonisland.core.drawing.IBufferedImage[] mBlockTile -> b
    com.citex.dragonisland.core.drawing.IBufferedImage[] mSmashedBlock -> c
    com.citex.dragonisland.core.drawing.IBufferedImage[] mCoin -> d
    com.citex.dragonisland.core.drawing.IBufferedImage[] mBrick -> e
    com.citex.dragonisland.core.drawing.IBufferedImage[] mQuestionBlock -> f
    com.citex.dragonisland.core.drawing.IBufferedImage[] mLava -> g
    com.citex.dragonisland.core.drawing.IBufferedImage mTerrainTileset -> h
    com.citex.dragonisland.core.drawing.IBufferedImage[] mTerrainTile -> i
    com.citex.dragonisland.core.drawing.IBufferedImage mSceneryTileset -> j
    com.citex.dragonisland.core.drawing.IBufferedImage[] mSceneryTile -> k
    int[] mTilesetIndex -> l
    float mFrameTimer -> m
    int mFrame -> n
    java.util.ArrayList mTileDefinitions -> o
    java.util.ArrayList mExplosion -> p
    com.citex.dragonisland.core.drawing.IBufferedImage getTile(int,int,int) -> a
    void setBlockExplode(float,float,char) -> a
    void draw(java.lang.Object,int,int,com.citex.dragonisland.core.drawing.Point,com.citex.dragonisland.core.tileset.Tile) -> a
    void drawExplosions(java.lang.Object,com.citex.dragonisland.core.level.Map,com.citex.dragonisland.core.drawing.Point) -> a
    void drawMap(java.lang.Object,float,com.citex.dragonisland.core.level.Map,com.citex.dragonisland.core.drawing.Point) -> a
    void drawLavaMap(java.lang.Object,float,com.citex.dragonisland.core.level.Map,com.citex.dragonisland.core.drawing.Point) -> b
    void drawPipeMap(java.lang.Object,float,com.citex.dragonisland.core.level.Map,com.citex.dragonisland.core.drawing.Point) -> c
    void drawEditorMap(java.lang.Object,float,com.citex.dragonisland.core.thread.Main,com.citex.dragonisland.core.level.Map,com.citex.dragonisland.core.drawing.Point) -> a
    void drawFrame(java.lang.Object,int,int,int,int,int,int) -> a
    void drawAnimatedFrame(java.lang.Object,int,int,int,int,int) -> a
    void initDefinitions() -> a
    java.lang.String[] getTileDescription(int,int) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> a
com.citex.dragonisland.core.util.Dialog -> com.citex.dragonisland.b.i.a:
    void showExitDialog(com.citex.dragonisland.android.MainActivity) -> a
com.citex.dragonisland.core.util.Dialog$1 -> com.citex.dragonisland.b.i.b:
    com.citex.dragonisland.android.MainActivity val$mainActivity -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.citex.dragonisland.core.util.Drawing -> com.citex.dragonisland.b.i.c:
    void fillRect(java.lang.Object,float,float,float,float) -> a
    void setResolution(javax.microedition.khronos.opengles.GL10,int,int) -> a
com.citex.dragonisland.core.util.FileIO -> com.citex.dragonisland.b.i.d:
    java.io.BufferedReader openBufferedReader(java.lang.String) -> a
    java.lang.String readLine(java.lang.String) -> b
    com.citex.dragonisland.core.drawing.IBufferedImage getImageResource(java.lang.Object,java.lang.String) -> a
    java.util.ArrayList getFolderList(java.lang.String) -> c
    java.util.ArrayList getFileList(java.lang.String,java.lang.String) -> a
    java.util.ArrayList getAssetsFileList(java.lang.String,java.lang.String) -> b
    java.io.RandomAccessFile loadLevel(com.citex.dragonisland.core.game.GameFolder,java.lang.String) -> a
    java.io.BufferedReader loadLegacyLevel(com.citex.dragonisland.core.game.GameFolder,java.lang.String) -> b
    void saveLevel(com.citex.dragonisland.core.game.GameFolder,com.citex.dragonisland.core.level.Level,java.lang.String) -> a
    java.io.File createJavaCacheFile(java.lang.String,java.lang.String) -> c
    java.io.File createAndroidCacheFile(android.content.Context,java.lang.String) -> a
com.citex.dragonisland.core.util.Numbers -> com.citex.dragonisland.b.i.e:
    int[] convertNumberToDigit(int,int) -> a
    float clamp(float,float,float) -> a
    com.citex.dragonisland.core.drawing.Point normalisePoint(float,float) -> a
    com.citex.dragonisland.core.drawing.Point getNormalisedCoordinate(float,float) -> b
com.citex.dragonisland.core.util.Sound -> com.citex.dragonisland.b.i.f:
    com.citex.dragonisland.core.audio.IMusic getMusicPlayer() -> a
    com.citex.dragonisland.core.audio.ISoundEffect getSoundPlayer(java.lang.String) -> a
    java.lang.String getSoundEffect(int) -> a
com.citex.dragonisland.core.util.Sprite -> com.citex.dragonisland.b.i.g:
    com.citex.dragonisland.core.sprite.entity.IEntity getEntity(com.citex.dragonisland.core.thread.Main,java.lang.Object,java.lang.String,int) -> a
com.citex.dragonisland.java.GameFrame -> com.citex.dragonisland.c.a:
    int Width -> a
    int Height -> b
    void componentResized(java.awt.event.ComponentEvent) -> componentResized
    void componentHidden(java.awt.event.ComponentEvent) -> componentHidden
    void componentShown(java.awt.event.ComponentEvent) -> componentShown
    void componentMoved(java.awt.event.ComponentEvent) -> componentMoved
com.citex.dragonisland.java.GamePanel -> com.citex.dragonisland.c.b:
    java.lang.Thread mThread -> a
    java.awt.image.BufferedImage mBackBuffer -> b
    java.awt.Graphics2D mGraphics -> c
    com.citex.dragonisland.core.thread.Main mMain -> d
    boolean mRunning -> e
    void setResolution(int,int) -> a
    void start() -> a
    void run() -> run
    void paintComponent(java.awt.Graphics) -> paintComponent
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
    void keyReleased(java.awt.event.KeyEvent) -> keyReleased
    void keyTyped(java.awt.event.KeyEvent) -> keyTyped
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseMoved(java.awt.event.MouseEvent) -> mouseMoved
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    void mouseDragged(java.awt.event.MouseEvent) -> mouseDragged
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseWheelMoved(java.awt.event.MouseWheelEvent) -> mouseWheelMoved
com.citex.dragonisland.java.audio.JLayerMp3Player -> com.citex.dragonisland.c.a.a:
    javazoom.jl.decoder.Bitstream mBitstream -> a
    javazoom.jl.decoder.Decoder mDecoder -> b
    javazoom.jl.player.AudioDevice mAudio -> c
    com.citex.dragonisland.java.audio.PlaybackListener mListener -> d
    boolean mPlaying -> e
    boolean play(int) -> a
    void close() -> a
    boolean decodeFrame() -> b
    boolean skipFrame() -> c
    boolean play(int,int) -> a
    com.citex.dragonisland.java.audio.PlaybackEvent createEvent(int) -> b
    com.citex.dragonisland.java.audio.PlaybackEvent createEvent(javazoom.jl.player.AudioDevice,int) -> a
    void setPlayBackListener(com.citex.dragonisland.java.audio.PlaybackListener) -> a
com.citex.dragonisland.java.audio.Music -> com.citex.dragonisland.c.a.b:
    java.lang.String mPath -> a
    com.citex.dragonisland.java.audio.JLayerMp3Player mPlayer -> b
    void stop() -> a
    void play(java.lang.String) -> a
    com.citex.dragonisland.java.audio.JLayerMp3Player playMp3(java.lang.String,com.citex.dragonisland.java.audio.PlaybackListener) -> a
    com.citex.dragonisland.java.audio.JLayerMp3Player playMp3(java.lang.String,int,int,com.citex.dragonisland.java.audio.PlaybackListener) -> a
    com.citex.dragonisland.java.audio.JLayerMp3Player playMp3(java.io.InputStream,int,int,com.citex.dragonisland.java.audio.PlaybackListener) -> a
    java.lang.String access$0() -> b
    com.citex.dragonisland.java.audio.JLayerMp3Player access$1() -> c
com.citex.dragonisland.java.audio.Music$1 -> com.citex.dragonisland.c.a.c:
    int val$start -> a
    int val$end -> b
    void run() -> run
com.citex.dragonisland.java.audio.Music$InfoListener -> com.citex.dragonisland.c.a.d:
    com.citex.dragonisland.java.audio.Music this$0 -> a
    void playbackStarted(com.citex.dragonisland.java.audio.PlaybackEvent) -> a
    void playbackFinished(com.citex.dragonisland.java.audio.PlaybackEvent) -> b
com.citex.dragonisland.java.audio.PlaybackEvent -> com.citex.dragonisland.c.a.e:
    int STOPPED -> a
    int STARTED -> b
    com.citex.dragonisland.java.audio.JLayerMp3Player source -> c
    int frame -> d
    int id -> e
com.citex.dragonisland.java.audio.PlaybackListener -> com.citex.dragonisland.c.a.f:
    void playbackStarted(com.citex.dragonisland.java.audio.PlaybackEvent) -> a
    void playbackFinished(com.citex.dragonisland.java.audio.PlaybackEvent) -> b
com.citex.dragonisland.java.audio.SoundEffect -> com.citex.dragonisland.c.a.g:
    java.lang.String mPath -> a
    int mLoop -> b
    void play(java.lang.String) -> a
com.citex.dragonisland.java.drawing.Image -> com.citex.dragonisland.c.b.a:
    java.awt.image.BufferedImage mBufferedImage -> a
    boolean mFlipImage -> b
    com.citex.dragonisland.core.drawing.IBufferedImage getImage() -> a
    com.citex.dragonisland.core.drawing.IBufferedImage getSubImage(java.lang.Object,int,int,int,int) -> a
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void draw(java.lang.Object,float,float) -> a
    void draw(java.lang.Object,float,float,float,float) -> a
    void draw(java.lang.Object,char,float,float) -> a
    void flipImage(boolean) -> a
    void draw(java.lang.Object,char,float,float,float,float,float) -> a
    void destroy(javax.microedition.khronos.opengles.GL10) -> b
    java.lang.Object clone() -> clone
javazoom.jl.decoder.BitReserve -> a.a.a.a:
    int offset -> a
    int totbit -> b
    int buf_byte_idx -> c
    int[] buf -> d
    int hsstell() -> a
    int hgetbits(int) -> a
    int hget1bit() -> b
    void hputbuf(int) -> b
    void rewindNbits(int) -> c
    void rewindNbytes(int) -> d
javazoom.jl.decoder.Bitstream -> a.a.a.b:
    byte INITIAL_SYNC -> a
    byte STRICT_SYNC -> b
    int[] framebuffer -> c
    int framesize -> d
    byte[] frame_bytes -> e
    int wordpointer -> f
    int bitindex -> g
    int syncword -> h
    int header_pos -> i
    boolean single_ch_mode -> j
    int[] bitmask -> k
    java.io.PushbackInputStream source -> l
    javazoom.jl.decoder.Header header -> m
    byte[] syncbuf -> n
    javazoom.jl.decoder.Crc16[] crc -> o
    byte[] rawid3v2 -> p
    boolean firstframe -> q
    void loadID3v2(java.io.InputStream) -> a
    int readID3v2Header(java.io.InputStream) -> b
    void close() -> a
    javazoom.jl.decoder.Header readFrame() -> b
    javazoom.jl.decoder.Header readNextFrame() -> f
    void nextFrame() -> g
    void unreadFrame() -> c
    void closeFrame() -> d
    boolean isSyncCurrentPosition(int) -> a
    javazoom.jl.decoder.BitstreamException newBitstreamException(int) -> b
    javazoom.jl.decoder.BitstreamException newBitstreamException(int,java.lang.Throwable) -> a
    int syncHeader(byte) -> a
    boolean isSyncMark(int,int,int) -> a
    int read_frame_data(int) -> c
    void parse_frame() -> e
    int get_bits(int) -> d
    void set_syncword(int) -> e
    int readFully(byte[],int,int) -> a
    int readBytes(byte[],int,int) -> b
javazoom.jl.decoder.BitstreamException -> a.a.a.c:
    int errorcode -> a
    int getErrorCode() -> a
    java.lang.String getErrorString(int) -> a
javazoom.jl.decoder.Crc16 -> a.a.a.d:
    short polynomial -> a
    short crc -> b
    void add_bits(int,int) -> a
    short checksum() -> a
javazoom.jl.decoder.Decoder -> a.a.a.e:
    javazoom.jl.decoder.Decoder$Params DEFAULT_PARAMS -> a
    javazoom.jl.decoder.Obuffer output -> b
    javazoom.jl.decoder.SynthesisFilter filter1 -> c
    javazoom.jl.decoder.SynthesisFilter filter2 -> d
    javazoom.jl.decoder.LayerIIIDecoder l3decoder -> e
    javazoom.jl.decoder.LayerIIDecoder l2decoder -> f
    javazoom.jl.decoder.LayerIDecoder l1decoder -> g
    int outputFrequency -> h
    int outputChannels -> i
    javazoom.jl.decoder.Equalizer equalizer -> j
    javazoom.jl.decoder.Decoder$Params params -> k
    boolean initialized -> l
    javazoom.jl.decoder.Obuffer decodeFrame(javazoom.jl.decoder.Header,javazoom.jl.decoder.Bitstream) -> a
    int getOutputFrequency() -> a
    int getOutputChannels() -> b
    javazoom.jl.decoder.DecoderException newDecoderException(int,java.lang.Throwable) -> a
    javazoom.jl.decoder.FrameDecoder retrieveDecoder(javazoom.jl.decoder.Header,javazoom.jl.decoder.Bitstream,int) -> a
    void initialize(javazoom.jl.decoder.Header) -> a
javazoom.jl.decoder.Decoder$Params -> a.a.a.f:
    javazoom.jl.decoder.OutputChannels outputChannels -> a
    javazoom.jl.decoder.Equalizer equalizer -> b
    java.lang.Object clone() -> clone
    javazoom.jl.decoder.Equalizer getInitialEqualizerSettings() -> a
javazoom.jl.decoder.DecoderException -> a.a.a.g:
    int errorcode -> a
    java.lang.String getErrorString(int) -> a
javazoom.jl.decoder.Equalizer -> a.a.a.h:
    javazoom.jl.decoder.Equalizer PASS_THRU_EQ -> a
    float[] settings -> b
    void setFrom(float[]) -> a
    void setFrom(javazoom.jl.decoder.Equalizer) -> a
    void reset() -> a
    float limit(float) -> b
    float[] getBandFactors() -> b
    float getBandFactor(float) -> a
javazoom.jl.decoder.FrameDecoder -> a.a.a.i:
    void decodeFrame() -> a
javazoom.jl.decoder.Header -> a.a.a.j:
    int[][] frequencies -> a
    int h_layer -> g
    int h_protection_bit -> h
    int h_bitrate_index -> i
    int h_padding_bit -> j
    int h_mode_extension -> k
    int h_version -> l
    int h_mode -> m
    int h_sample_frequency -> n
    int h_number_of_subbands -> o
    int h_intensity_stereo_bound -> p
    boolean h_copyright -> q
    boolean h_original -> r
    double[] h_vbr_time_per_frame -> s
    boolean h_vbr -> t
    int h_vbr_frames -> u
    int h_vbr_scale -> v
    int h_vbr_bytes -> w
    byte[] h_vbr_toc -> x
    byte syncmode -> y
    javazoom.jl.decoder.Crc16 crc -> z
    short checksum -> b
    int framesize -> c
    int nSlots -> d
    int _headerstring -> A
    int[][][] bitrates -> e
    java.lang.String[][][] bitrate_str -> f
    java.lang.String toString() -> toString
    void read_header(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Crc16[]) -> a
    void parseVBR(byte[]) -> a
    int version() -> a
    int layer() -> b
    int bitrate_index() -> c
    int sample_frequency() -> d
    int frequency() -> e
    int mode() -> f
    boolean checksums() -> g
    boolean checksum_ok() -> h
    int slots() -> i
    int mode_extension() -> j
    int calculate_framesize() -> k
    float ms_per_frame() -> l
    java.lang.String layer_string() -> m
    java.lang.String bitrate_string() -> n
    int bitrate() -> o
    java.lang.String sample_frequency_string() -> p
    java.lang.String mode_string() -> q
    java.lang.String version_string() -> r
    int number_of_subbands() -> s
    int intensity_stereo_bound() -> t
javazoom.jl.decoder.JavaLayerException -> a.a.a.k:
    java.lang.Throwable exception -> a
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
javazoom.jl.decoder.JavaLayerHook -> a.a.a.l:
    java.io.InputStream getResourceAsStream(java.lang.String) -> a
javazoom.jl.decoder.JavaLayerUtils -> a.a.a.m:
    javazoom.jl.decoder.JavaLayerHook hook -> a
    java.lang.Object deserialize(java.io.InputStream) -> a
    java.lang.Object deserializeArray(java.io.InputStream,java.lang.Class,int) -> a
    java.lang.Object deserializeArrayResource(java.lang.String,java.lang.Class,int) -> a
    java.io.InputStream getResourceAsStream(java.lang.String) -> a
javazoom.jl.decoder.LayerIDecoder -> a.a.a.n:
    javazoom.jl.decoder.Bitstream stream -> a
    javazoom.jl.decoder.Header header -> b
    javazoom.jl.decoder.SynthesisFilter filter1 -> c
    javazoom.jl.decoder.SynthesisFilter filter2 -> d
    javazoom.jl.decoder.Obuffer buffer -> e
    int which_channels -> f
    int mode -> g
    int num_subbands -> h
    javazoom.jl.decoder.LayerIDecoder$Subband[] subbands -> i
    javazoom.jl.decoder.Crc16 crc -> j
    void create(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.Obuffer,int) -> a
    void decodeFrame() -> a
    void createSubbands() -> b
    void readAllocation() -> c
    void readScaleFactorSelection() -> d
    void readScaleFactors() -> e
    void readSampleData() -> f
javazoom.jl.decoder.LayerIDecoder$Subband -> a.a.a.o:
    float[] scalefactors -> a
    void read_allocation(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header) -> a
    boolean read_sampledata(javazoom.jl.decoder.Bitstream) -> a
    boolean put_next_sample(int,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter) -> a
javazoom.jl.decoder.LayerIDecoder$SubbandLayer1 -> a.a.a.p:
    float[] table_factor -> b
    float[] table_offset -> c
    int subbandnumber -> d
    int samplenumber -> e
    int allocation -> f
    float scalefactor -> g
    int samplelength -> h
    float sample -> i
    float factor -> j
    float offset -> k
    void read_allocation(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header) -> a
    boolean read_sampledata(javazoom.jl.decoder.Bitstream) -> a
    boolean put_next_sample(int,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter) -> a
javazoom.jl.decoder.LayerIDecoder$SubbandLayer1IntensityStereo -> a.a.a.q:
    float channel2_scalefactor -> l
    void read_allocation(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header) -> a
    boolean read_sampledata(javazoom.jl.decoder.Bitstream) -> a
    boolean put_next_sample(int,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter) -> a
javazoom.jl.decoder.LayerIDecoder$SubbandLayer1Stereo -> a.a.a.r:
    int channel2_allocation -> l
    float channel2_scalefactor -> m
    int channel2_samplelength -> n
    float channel2_sample -> o
    float channel2_factor -> p
    float channel2_offset -> q
    void read_allocation(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header) -> a
    boolean read_sampledata(javazoom.jl.decoder.Bitstream) -> a
    boolean put_next_sample(int,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter) -> a
javazoom.jl.decoder.LayerIIDecoder -> a.a.a.s:
    void createSubbands() -> b
    void readScaleFactorSelection() -> d
javazoom.jl.decoder.LayerIIDecoder$SubbandLayer2 -> a.a.a.t:
    float[] grouping_5bits -> b
    float[] grouping_7bits -> c
    float[] grouping_10bits -> d
    int[] table_ab1_codelength -> e
    float[][] table_ab1_groupingtables -> f
    float[] table_ab1_factor -> g
    float[] table_ab1_c -> h
    float[] table_ab1_d -> i
    float[][] table_ab234_groupingtables -> j
    int[] table_ab2_codelength -> k
    float[] table_ab2_factor -> l
    float[] table_ab2_c -> m
    float[] table_ab2_d -> n
    int[] table_ab3_codelength -> o
    float[] table_ab3_factor -> p
    float[] table_ab3_c -> q
    float[] table_ab3_d -> r
    int[] table_ab4_codelength -> s
    float[] table_ab4_factor -> t
    float[] table_ab4_c -> u
    float[] table_ab4_d -> v
    int[] table_cd_codelength -> w
    float[][] table_cd_groupingtables -> x
    float[] table_cd_factor -> y
    float[] table_cd_c -> z
    float[] table_cd_d -> A
    int subbandnumber -> B
    int allocation -> C
    int scfsi -> D
    float scalefactor1 -> E
    float scalefactor2 -> F
    float scalefactor3 -> G
    int[] codelength -> H
    float[][] groupingtable -> I
    float[] factor -> J
    int groupnumber -> K
    int samplenumber -> L
    float[] samples -> M
    float[] c -> N
    float[] d -> O
    int get_allocationlength(javazoom.jl.decoder.Header) -> a
    void prepare_sample_reading(javazoom.jl.decoder.Header,int,int,float[],int[],float[],float[]) -> a
    void read_allocation(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor_selection(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header) -> a
    boolean read_sampledata(javazoom.jl.decoder.Bitstream) -> a
    boolean put_next_sample(int,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter) -> a
javazoom.jl.decoder.LayerIIDecoder$SubbandLayer2IntensityStereo -> a.a.a.u:
    int channel2_scfsi -> P
    float channel2_scalefactor1 -> Q
    float channel2_scalefactor2 -> R
    float channel2_scalefactor3 -> S
    void read_allocation(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor_selection(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header) -> a
    boolean read_sampledata(javazoom.jl.decoder.Bitstream) -> a
    boolean put_next_sample(int,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter) -> a
javazoom.jl.decoder.LayerIIDecoder$SubbandLayer2Stereo -> a.a.a.v:
    int channel2_allocation -> P
    int channel2_scfsi -> Q
    float channel2_scalefactor1 -> R
    float channel2_scalefactor2 -> S
    float channel2_scalefactor3 -> T
    int[] channel2_codelength -> U
    float[] channel2_factor -> V
    float[] channel2_samples -> W
    float[] channel2_c -> X
    float[] channel2_d -> Y
    void read_allocation(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor_selection(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Crc16) -> a
    void read_scalefactor(javazoom.jl.decoder.Bitstream,javazoom.jl.decoder.Header) -> a
    boolean read_sampledata(javazoom.jl.decoder.Bitstream) -> a
    boolean put_next_sample(int,javazoom.jl.decoder.SynthesisFilter,javazoom.jl.decoder.SynthesisFilter) -> a
javazoom.jl.decoder.LayerIIIDecoder -> a.a.a.w:
    double d43 -> a
    int[] scalefac_buffer -> b
    int CheckSumHuff -> s
    int[] is_1d -> t
    float[][][] ro -> u
    float[][][] lr -> v
    float[] out_1d -> w
    float[][] prevblck -> x
    float[][] k -> y
    int[] nonzero -> z
    javazoom.jl.decoder.Bitstream stream -> A
    javazoom.jl.decoder.Header header -> B
    javazoom.jl.decoder.SynthesisFilter filter1 -> C
    javazoom.jl.decoder.SynthesisFilter filter2 -> D
    javazoom.jl.decoder.Obuffer buffer -> E
    int which_channels -> F
    javazoom.jl.decoder.BitReserve br -> G
    javazoom.jl.decoder.LayerIIIDecoder$III_side_info_t si -> H
    javazoom.jl.decoder.LayerIIIDecoder$temporaire2[] III_scalefac_t -> I
    javazoom.jl.decoder.LayerIIIDecoder$temporaire2[] scalefac -> J
    int max_gr -> K
    int frame_start -> L
    int part2_start -> M
    int channels -> N
    int first_channel -> O
    int last_channel -> P
    int sfreq -> Q
    float[] samples1 -> R
    float[] samples2 -> S
    int[] new_slen -> T
    int[] x -> c
    int[] y -> d
    int[] v -> e
    int[] w -> f
    int[] is_pos -> g
    float[] is_ratio -> h
    float[] tsOutCopy -> i
    float[] rawout -> j
    int counter -> U
    int[][] slen -> V
    int[] pretab -> k
    javazoom.jl.decoder.LayerIIIDecoder$SBI[] sfBandIndex -> W
    float[] two_to_negative_half_pow -> l
    float[] t_43 -> m
    float[][] io -> n
    float[] TAN12 -> o
    int[][] reorder_table -> X
    float[] cs -> Y
    float[] ca -> Z
    float[][] win -> p
    javazoom.jl.decoder.LayerIIIDecoder$Sftable sftable -> q
    int[][][] nr_of_sfb_block -> r
    void decodeFrame() -> a
    void decode() -> b
    boolean get_side_info() -> c
    void get_scale_factors(int,int) -> a
    void get_LSF_scale_data(int,int) -> b
    void get_LSF_scale_factors(int,int) -> c
    void huffman_decode(int,int) -> d
    void i_stereo_k_values(int,int,int) -> a
    void dequantize_sample(float[][],int,int) -> a
    void reorder(float[][],int,int) -> b
    void stereo(int) -> a
    void antialias(int,int) -> e
    void hybrid(int,int) -> f
    void do_downmix() -> d
    void inv_mdct(float[],float[],int) -> a
    float[] create_t_43() -> e
    int[] reorder(int[]) -> a
javazoom.jl.decoder.LayerIIIDecoder$III_side_info_t -> a.a.a.x:
    int main_data_begin -> a
    int private_bits -> b
    javazoom.jl.decoder.LayerIIIDecoder$temporaire[] ch -> c
javazoom.jl.decoder.LayerIIIDecoder$SBI -> a.a.a.y:
    int[] l -> a
    int[] s -> b
javazoom.jl.decoder.LayerIIIDecoder$Sftable -> a.a.a.z:
    int[] l -> a
    int[] s -> b
    javazoom.jl.decoder.LayerIIIDecoder this$0 -> c
javazoom.jl.decoder.LayerIIIDecoder$gr_info_s -> a.a.a.A:
    int part2_3_length -> a
    int big_values -> b
    int global_gain -> c
    int scalefac_compress -> d
    int window_switching_flag -> e
    int block_type -> f
    int mixed_block_flag -> g
    int[] table_select -> h
    int[] subblock_gain -> i
    int region0_count -> j
    int region1_count -> k
    int preflag -> l
    int scalefac_scale -> m
    int count1table_select -> n
javazoom.jl.decoder.LayerIIIDecoder$temporaire -> a.a.a.B:
    int[] scfsi -> a
    javazoom.jl.decoder.LayerIIIDecoder$gr_info_s[] gr -> b
javazoom.jl.decoder.LayerIIIDecoder$temporaire2 -> a.a.a.C:
    int[] l -> a
    int[][] s -> b
javazoom.jl.decoder.Obuffer -> a.a.a.D:
    void append(int,short) -> a
    void appendSamples(int,float[]) -> a
    short clip(float) -> a
    void write_buffer(int) -> a
    void clear_buffer() -> a
javazoom.jl.decoder.OutputChannels -> a.a.a.E:
    javazoom.jl.decoder.OutputChannels LEFT -> a
    javazoom.jl.decoder.OutputChannels RIGHT -> b
    javazoom.jl.decoder.OutputChannels BOTH -> c
    javazoom.jl.decoder.OutputChannels DOWNMIX -> d
    int outputChannels -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
javazoom.jl.decoder.SampleBuffer -> a.a.a.F:
    short[] buffer -> a
    int[] bufferp -> b
    int channels -> c
    int frequency -> d
    short[] getBuffer() -> b
    int getBufferLength() -> c
    void append(int,short) -> a
    void appendSamples(int,float[]) -> a
    void write_buffer(int) -> a
    void clear_buffer() -> a
javazoom.jl.decoder.SynthesisFilter -> a.a.a.G:
    float[] v1 -> a
    float[] v2 -> b
    float[] actual_v -> c
    int actual_write_pos -> d
    float[] samples -> e
    int channel -> f
    float scalefactor -> g
    float[] eq -> h
    float[] _tmpOut -> i
    float cos1_64 -> j
    float cos3_64 -> k
    float cos5_64 -> l
    float cos7_64 -> m
    float cos9_64 -> n
    float cos11_64 -> o
    float cos13_64 -> p
    float cos15_64 -> q
    float cos17_64 -> r
    float cos19_64 -> s
    float cos21_64 -> t
    float cos23_64 -> u
    float cos25_64 -> v
    float cos27_64 -> w
    float cos29_64 -> x
    float cos31_64 -> y
    float cos1_32 -> z
    float cos3_32 -> A
    float cos5_32 -> B
    float cos7_32 -> C
    float cos9_32 -> D
    float cos11_32 -> E
    float cos13_32 -> F
    float cos15_32 -> G
    float cos1_16 -> H
    float cos3_16 -> I
    float cos5_16 -> J
    float cos7_16 -> K
    float cos1_8 -> L
    float cos3_8 -> M
    float cos1_4 -> N
    float[] d -> O
    float[][] d16 -> P
    void setEQ(float[]) -> a
    void reset() -> a
    void input_sample(float,int) -> a
    void input_samples(float[]) -> b
    void compute_new_v() -> b
    void compute_pcm_samples0(javazoom.jl.decoder.Obuffer) -> b
    void compute_pcm_samples1(javazoom.jl.decoder.Obuffer) -> c
    void compute_pcm_samples2(javazoom.jl.decoder.Obuffer) -> d
    void compute_pcm_samples3(javazoom.jl.decoder.Obuffer) -> e
    void compute_pcm_samples4(javazoom.jl.decoder.Obuffer) -> f
    void compute_pcm_samples5(javazoom.jl.decoder.Obuffer) -> g
    void compute_pcm_samples6(javazoom.jl.decoder.Obuffer) -> h
    void compute_pcm_samples7(javazoom.jl.decoder.Obuffer) -> i
    void compute_pcm_samples8(javazoom.jl.decoder.Obuffer) -> j
    void compute_pcm_samples9(javazoom.jl.decoder.Obuffer) -> k
    void compute_pcm_samples10(javazoom.jl.decoder.Obuffer) -> l
    void compute_pcm_samples11(javazoom.jl.decoder.Obuffer) -> m
    void compute_pcm_samples12(javazoom.jl.decoder.Obuffer) -> n
    void compute_pcm_samples13(javazoom.jl.decoder.Obuffer) -> o
    void compute_pcm_samples14(javazoom.jl.decoder.Obuffer) -> p
    void compute_pcm_samples15(javazoom.jl.decoder.Obuffer) -> q
    void compute_pcm_samples(javazoom.jl.decoder.Obuffer) -> r
    void calculate_pcm_samples(javazoom.jl.decoder.Obuffer) -> a
    float[] load_d() -> c
    float[][] splitArray(float[],int) -> a
    float[] subArray(float[],int,int) -> a
javazoom.jl.decoder.huffcodetab -> a.a.a.H:
    char tablename0 -> b
    char tablename1 -> c
    char tablename2 -> d
    int xlen -> e
    int ylen -> f
    int linbits -> g
    int linmax -> h
    int ref -> i
    int[] table -> j
    int[] hlen -> k
    int[][] val -> l
    int treelen -> m
    int[][] ValTab0 -> n
    int[][] ValTab1 -> o
    int[][] ValTab2 -> p
    int[][] ValTab3 -> q
    int[][] ValTab4 -> r
    int[][] ValTab5 -> s
    int[][] ValTab6 -> t
    int[][] ValTab7 -> u
    int[][] ValTab8 -> v
    int[][] ValTab9 -> w
    int[][] ValTab10 -> x
    int[][] ValTab11 -> y
    int[][] ValTab12 -> z
    int[][] ValTab13 -> A
    int[][] ValTab14 -> B
    int[][] ValTab15 -> C
    int[][] ValTab16 -> D
    int[][] ValTab24 -> E
    int[][] ValTab32 -> F
    int[][] ValTab33 -> G
    javazoom.jl.decoder.huffcodetab[] ht -> a
    int[] bitbuf -> H
    int huffman_decoder(javazoom.jl.decoder.huffcodetab,int[],int[],int[],int[],javazoom.jl.decoder.BitReserve) -> a
    void inithuff() -> a
javazoom.jl.player.AudioDevice -> a.a.b.a:
    void open(javazoom.jl.decoder.Decoder) -> a
    void write(short[],int,int) -> a
    void close() -> a
    void flush() -> b
    int getPosition() -> c
javazoom.jl.player.AudioDeviceBase -> a.a.b.b:
    boolean open -> a
    javazoom.jl.decoder.Decoder decoder -> b
    void open(javazoom.jl.decoder.Decoder) -> a
    void openImpl() -> d
    void setOpen(boolean) -> a
    boolean isOpen() -> e
    void close() -> a
    void closeImpl() -> f
    void write(short[],int,int) -> a
    void writeImpl(short[],int,int) -> b
    void flush() -> b
    void flushImpl() -> g
    javazoom.jl.decoder.Decoder getDecoder() -> h
javazoom.jl.player.AudioDeviceFactory -> a.a.b.c:
    javazoom.jl.player.AudioDevice createAudioDevice() -> a
    javazoom.jl.player.AudioDevice instantiate(java.lang.ClassLoader,java.lang.String) -> a
javazoom.jl.player.FactoryRegistry -> a.a.b.d:
    javazoom.jl.player.FactoryRegistry instance -> b
    java.util.Hashtable factories -> a
    javazoom.jl.player.FactoryRegistry systemRegistry() -> b
    void addFactory(javazoom.jl.player.AudioDeviceFactory) -> a
    javazoom.jl.player.AudioDevice createAudioDevice() -> a
    javazoom.jl.player.AudioDeviceFactory[] getFactoriesPriority() -> c
    void registerDefaultFactories() -> d
javazoom.jl.player.JavaSoundAudioDevice -> a.a.b.e:
    javax.sound.sampled.SourceDataLine source -> a
    javax.sound.sampled.AudioFormat fmt -> b
    byte[] byteBuf -> c
    void setAudioFormat(javax.sound.sampled.AudioFormat) -> a
    javax.sound.sampled.AudioFormat getAudioFormat() -> i
    javax.sound.sampled.DataLine$Info getSourceLineInfo() -> j
    void open(javax.sound.sampled.AudioFormat) -> b
    void openImpl() -> d
    void createSource() -> k
    void closeImpl() -> f
    void writeImpl(short[],int,int) -> b
    byte[] getByteArray(int) -> a
    byte[] toByteArray(short[],int,int) -> c
    void flushImpl() -> g
    int getPosition() -> c
    void test() -> l
javazoom.jl.player.JavaSoundAudioDeviceFactory -> a.a.b.f:
    boolean tested -> a
    javazoom.jl.player.AudioDevice createAudioDevice() -> a
    javazoom.jl.player.JavaSoundAudioDevice createAudioDeviceImpl() -> b
    void testAudioDevice() -> c
